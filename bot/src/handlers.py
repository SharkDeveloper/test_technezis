from aiogram import Dispatcher, types
from aiogram.filters import Command
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
import pandas as pd
import io
from datetime import datetime
from celery import Celery
import logging

# Configure logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# Initialize Celery
celery_app = Celery('bot',
                   broker='redis://redis:6379/0',
                   backend='redis://redis:6379/0')

def register_handlers(dp: Dispatcher):
    # Create keyboard
    keyboard = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="–ó–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª")]
        ],
        resize_keyboard=True
    )

    @dp.message(Command("start"))
    async def cmd_start(message: types.Message):
        await message.answer(
            "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ —Ü–µ–Ω —Å –≤–µ–±-—Å–∞–π—Ç–æ–≤.\n\n"
            "–Ø –º–æ–≥—É:\n"
            "1. –ü—Ä–∏–Ω–∏–º–∞—Ç—å Excel —Ñ–∞–π–ª—ã —Å –¥–∞–Ω–Ω—ã–º–∏ –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞\n\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞.",
            reply_markup=keyboard
        )

    @dp.message(lambda message: message.text == "–ó–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª")
    async def upload_file(message: types.Message):
        await message.answer(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ Excel —Ñ–∞–π–ª (.xlsx, .xls) —Å–æ —Å–ª–µ–¥—É—é—â–∏–º–∏ –∫–æ–ª–æ–Ω–∫–∞–º–∏:\n"
            "- title: –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–∞–π—Ç–∞\n"
            "- url: —Å—Å—ã–ª–∫–∞ –Ω–∞ —Å–∞–π—Ç\n"
            "- xpath: –ø—É—Ç—å –∫ —ç–ª–µ–º–µ–Ω—Ç—É —Å —Ü–µ–Ω–æ–π"
        )

    @dp.message(lambda message: message.document is not None)
    async def handle_file(message: types.Message):
        # Check if file is Excel
        if not message.document.file_name.endswith(('.xlsx', '.xls')):
            await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª –≤ —Ñ–æ—Ä–º–∞—Ç–µ Excel (.xlsx, .xls)")
            return

        try:
            # Download the file
            file = await message.bot.get_file(message.document.file_id)
            file_path = file.file_path
            downloaded_file = await message.bot.download_file(file_path)
            file_content = downloaded_file.read()
            
            # Read Excel file
            # Determine Excel engine based on file extension
            engine = 'openpyxl' if message.document.file_name.endswith('.xlsx') else 'xlrd'
            df = pd.read_excel(io.BytesIO(file_content), engine=engine)
            
            # Check required columns
            required_columns = ['title', 'url', 'xpath']
            missing_columns = [col for col in required_columns if col not in df.columns]
            
            if missing_columns:
                await message.answer(
                    f"–û—à–∏–±–∫–∞: –í —Ñ–∞–π–ª–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –∫–æ–ª–æ–Ω–∫–∏: {', '.join(missing_columns)}\n"
                    "–¢—Ä–µ–±—É–µ–º—ã–µ –∫–æ–ª–æ–Ω–∫–∏: title, url, xpath"
                )
                return

            # Save file with timestamp
            timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
            filename = f"websites_{timestamp}.xlsx"
            df.to_excel(filename, index=False, engine='openpyxl')

            # Prepare response message
            response = "–°–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞:\n\n"
            for _, row in df.iterrows():
                response += f"–ù–∞–∑–≤–∞–Ω–∏–µ: {row['title']}\n"
                response += f"URL: {row['url']}\n"
                response += f"XPath: {row['xpath']}\n"
                response += "-" * 30 + "\n"

            # Split response if it's too long
            max_length = 4096
            for i in range(0, len(response), max_length):
                chunk = response[i:i + max_length]
                await message.answer(chunk)

            await message.answer(
                f"–§–∞–π–ª —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –∫–∞–∫ {filename}\n"
                "–ù–∞—á–∏–Ω–∞—é –ø–∞—Ä—Å–∏–Ω–≥ —Å–∞–π—Ç–æ–≤..."
            )

            # Send websites data to worker
            websites_data = df.to_dict('records')
            task = celery_app.send_task('main.process_websites', args=[websites_data])
            results = task.get()

            # Send results to user
            for result in results:
                if result.get('success', False):
                    price = result.get('price')
                    if price:
                        # Format price with spaces for thousands
                        try:
                            price_int = int(price.replace(',', '.').replace(' ', ''))
                            formatted_price = f"{price_int:,}".replace(',', ' ')
                            price_text = f"–¶–µ–Ω–∞: {formatted_price} ‚ÇΩ"
                        except ValueError:
                            price_text = f"–¶–µ–Ω–∞: {price} ‚ÇΩ"
                    else:
                        price_text = "–¶–µ–Ω–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"
                    
                    await message.answer(
                        f"‚úÖ {result.get('title', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')}\n"
                        f"{price_text}"
                    )
                else:
                    await message.answer(
                        f"‚ùå {result.get('title', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')}\n"
                        f"–û—à–∏–±–∫–∞: {result.get('error', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}"
                    )

            # –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ—Å–ª–µ –ø–∞—Ä—Å–∏–Ω–≥–∞
            stats_task = celery_app.send_task('main.get_statistics')
            stats = stats_task.get(timeout=10)
            
            if stats:
                await message.answer(
                    "üìä –û–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ—Å–ª–µ –ø–∞—Ä—Å–∏–Ω–≥–∞:\n\n"
                    f"–í—Å–µ–≥–æ —Ç–æ–≤–∞—Ä–æ–≤: {stats.get('total_products', 0)}\n"
                    f"–¢–æ–≤–∞—Ä–æ–≤ —Å —Ü–µ–Ω–∞–º–∏: {stats.get('products_with_price', 0)}\n"
                    f"–°—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞: {stats.get('average_price', '0.00')} ‚ÇΩ"
                )
            
            await message.answer("–ü–∞—Ä—Å–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω!")

        except Exception as e:
            await message.answer(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞: {str(e)}") 